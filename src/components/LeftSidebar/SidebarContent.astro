---
import { getLanguageFromURL } from '~/util';
import { isSubPage } from '~/util/isSubPage';

export interface Props {
	type: TabType;
	defaultActiveTab: TabType;
	sidebarSections: Array<{
		text: string;
		type: TabType;
		children: Array<{ text: string; slug: string; isFallback?: boolean }>;
	}>;
	currentPageMatch: string;
}
type TabType = 'learn' | 'api';

const { type, defaultActiveTab, sidebarSections, currentPageMatch } = Astro.props as Props;
const lang = getLanguageFromURL(Astro.url.pathname);
---

{
	sidebarSections.map((section) => (
		<li class:list={['nav-group', type, defaultActiveTab === type && 'active']}>
			<details open>
				<summary class="nav-group-title">
					<h2>
						{section.text}
					</h2>
					<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 1 16 16"
							width="16"
							height="16"
							aria-hidden="true"
						>
							<path
								fill-rule="evenodd"
								d="M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z"
							/>
						</svg>
				</summary>
				<ul>
					{section.children.map(({ slug, text, isFallback }) => (
						<li class={
						`nav-link ${section.key === 'program-in-practice' ? 'program-in-practice-link' : ''}`
						}>
						<a
							href={`${Astro.site?.pathname}${lang}/${slug}/`}
							aria-current={`${currentPageMatch.endsWith(slug) ? 'page' : 'false'}`}
							data-current-parent={`${isSubPage(currentPageMatch, slug) ? 'true' : 'false'}`}
							rel="prefetch"
						>
							<span class="nav-text"><Fragment set:html={text} /></span>
						</a>
						</li>
					))}
				</ul>
			</details>
		</li>
	))
}

<script is:inline>
	const updateCheckmarks = () => {
    const readPages = JSON.parse(localStorage.getItem('readPages') || '[]');

	  // Mapping slugs to indexes
	  const slugToIndexMap = {
		'about-program-in-practice': 1,
        'how-1-855-eliquis-works': 2,
        'provider-expresses-that-patient-is-concerned-about-high-out-of-pocket-costs': 3,
        'provider-expresses-that-patient-unable-to-get-prescription-filled': 4,
        'pharmacist-says-medicare-medicaid-dod-tricare-va-champus-patients-are-not-eligible-for-co-pay-assistance': 5,
        'co-pay-backdate-request': 6,
        'provider-expresses-that-patient-unaware-of-co-pay-program-andor-hasnt-been-using-co-pay-card': 7,
        'mail-order-pharmacy': 8,
        'e-sign': 9,
        'digital-assistant': 10
	  };
  
	  const links = document.querySelectorAll('.nav-link a');
  
	  links.forEach(link => {
      const slug = new URL(link.href).pathname.split('/').filter(Boolean).pop();
      const pageIndex = slugToIndexMap[slug];
      const checkmarkSpan = '<span class="checkmark">âœ“</span>';

      if (pageIndex && readPages.includes(pageIndex)) {
        if (!link.innerHTML.includes('checkmark')) {
          link.innerHTML += checkmarkSpan; // Append the checkmark span
          //link.addClass("unlocked");
        }
      } else {
        link.innerHTML = link.innerHTML.replace(checkmarkSpan, ''); // Remove checkmark span
        //link.addClass("locked");
      }
    });
  };

  document.addEventListener('DOMContentLoaded', updateCheckmarks);
  window.addEventListener('readPageUpdated', updateCheckmarks);
</script>
  
  

<style lang="scss">
	:global(.checkmark) {
		background-color: var(--custom-orange);
		color: var(--custom-white);
		width: 18px;
		min-width: 18px;
		height: 18px;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		border-radius: 1em;
	}
	
	.nav-group {
		margin-bottom: 1rem;
	}
	.nav-group .placeholder {
		opacity: 0.6;
		text-align: center;
		display: block;
	}
	@media (max-width: 50em) {
		.sm-hidden {
			display: none !important;
		}
	}
	@media (min-width: 50em) {
		.nav-group {
			display: none;
			margin-bottom: 1.75rem;
		}
	}
	.nav-group.active {
		display: block;
	}
	.nav-group-title {
		font-size: 1.2em;
		display: flex;
		align-items: center;
		justify-content: space-between;
		font-weight: 600;
		padding: 0.75rem 2rem;
		background-color: var(--custom-maroon);
		/* border-radius: 1em 0 0 1em; */
		svg {
			path {
				fill: var(--custom-orange);
			}
		}
		h2{
			background: none;
			color: var(--custom-white)
		}
	}
	.nav-link {
		&.program-in-practice-link {
			
			a {
				&:before {
					content: '';
					display: block;
					position: absolute;
					width: 18px;
					height: 18px;
					right: 0.8em;
					background-color: var(--theme-bg-offset);
					border-radius: 1.5em;
					z-index: -1;
				}
				/* border: 1px solid var(--custom-maroon-25);
				margin: .25em 0; */
				padding: 0.5rem .75rem;
				border-radius: .25em;
				display: flex;
				justify-content: space-between;
				// background-color: var(--theme-bg-gradient-top);
			}
			a span.nav-text {
				width: 85%;
			}
		}
	}
	.nav-link a {
		margin: 1px;
		padding: 0.5rem 2rem;
		// font: inherit;
		color: var(--theme-text-lighter);
		text-decoration: none;
		display: block;
		$indent: 0em;
		width: calc(100% - #{$indent});
		position: relative;
		left: $indent;
		/* border-radius: 1em 0 0 1em; */

		&:hover,
		&:focus {
			background-color: var(--custom-tan-50);
		}

		&[aria-current='page'],
		&[data-current-parent='true'] {
			color: var(--theme-text);
			background-color: var(--custom-tan-25);
			
			font-weight: 500;
			/* Indicates the current page for forced colors users in older browsers */
			outline: 1px solid transparent;

			&:focus {
				// outline: 2px solid;
			}
		}

		@media (forced-colors: active) {
			&[aria-current='page'],
			&[data-current-parent='true'] {
				border: 1px solid LinkText;
			}
		}
	}

	@media (min-width: 50em) {
		.nav-group-title,
		.nav-link a {
			padding: 0.5rem 1rem;
		}
	}

	:global(:root.theme-dark) .nav-link a[aria-current='page'],
	:global(:root.theme-dark) .nav-link a[data-current-parent='true'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}

	.fallback {
		font-size: 0.75em;
		line-height: 1;
		font-weight: bold;
		color: var(--theme-text-light);
	}

	details > summary {
		list-style: none;
	}

	details > summary::marker,
	details > summary::-webkit-details-marker {
		display: none;
	}

	details[open] > summary svg {
		transform: rotate(90deg);
	}

	summary {
		cursor: pointer;
	}

	summary h2 {
		/* all: inherit; */
		font-size: inherit;
		margin: 0;
		padding: 0;
	}

	svg {
		transform: rotate(0);
		transition: 0.15s transform ease;
		vertical-align: middle;
	}

	:global([dir='rtl']) svg {
		transform: rotate(180deg);
	}

	svg path {
		fill: currentColor;
	}
</style>
