---
import { useTranslations } from '~/i18n/util';
import UIString from '../UIString.astro';
import houston from '../tutorial/houston-happy.webp';

const t = useTranslations(Astro);

const categories = [
	{
		category: 'issue',
		icon: `M12 16a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm10.67 1.47-8.05-14a3 3 0 0 0-5.24 0l-8 14A3 3 0 0 0 3.94 22h16.12a3 3 0 0 0 2.61-4.53Zm-1.73 2a1 1 0 0 1-.88.51H3.94a1 1 0 0 1-.88-.51 1 1 0 0 1 0-1l8-14a1 1 0 0 1 1.78 0l8.05 14a1 1 0 0 1 .05 1.02v-.02ZM12 8a1 1 0 0 0-1 1v4a1 1 0 0 0 2 0V9a1 1 0 0 0-1-1Z`,
	},
	{
		category: 'idea',
		icon: `M17.09 2.82A8 8 0 0 0 5.86 14.13c.7.8 1.1 1.8 1.14 2.87v3a3 3 0 0 0 3 3h4a3 3 0 0 0 3-3v-2.81c.03-1.17.46-2.3 1.22-3.19a8 8 0 0 0-1.13-11.2v.02ZM15 20a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-1h6v1Zm1.67-7.24c-1 1.2-1.6 2.68-1.67 4.24h-2v-3a1 1 0 0 0-2 0v3H9a6.5 6.5 0 0 0-1.6-4.16 6 6 0 1 1 9.27-.08Z`,
	},
	{
		category: 'other',
		icon: `M12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm14 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z`,
	},
] as const;

const instanceId = Math.round(Math.random() * 10e9).toString(36);
---

<form id="feedback-fish-form-custom" onsubmit="">
	<!-- <h1><UIString key="feedback.formTitle" /></h1> -->
	<fieldset class="category-options">
		<legend class="sr-only"><UIString key={'feedback.categoryGroupLabel'} /></legend>
		{
			categories.map(({ category, icon }, index) => (
				<span class="category-option">
					<input
						class="sr-only"
						id={category + instanceId}
						type="radio"
						name="category"
						value={category}
						checked={index === 0}
					/>
					<label for={category + instanceId}>
						<svg
							aria-hidden="true"
							xmlns="http://www.w3.org/2000/svg"
							fill="currentcolor"
							viewBox="0 0 24 24"
						>
							<path d={icon} />
						</svg>
						<span>
							<UIString key={`feedback.${category}`} />
						</span>
					</label>
				</span>
			))
		}
	</fieldset>
	<label for={'textarea' + instanceId} class="sr-only">
		<UIString key="feedback.messageA11yLabel" />
	</label>
	<textarea
		id={'textarea' + instanceId}
		name="text"
		cols="34"
		rows="3"
		required
		placeholder={t('feedback.placeholder')}></textarea>
	<div class="submit-buttons">
		<button type="submit"><UIString key="feedback.submit" /></button>
		
	</div>
</form>
<div class="success-pane" hidden tabindex="-1">
	<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 24 24"><path fill="#76004B" d="M23 10a2 2 0 0 0-2-2h-6.32l.96-4.57c.02-.1.03-.21.03-.32c0-.41-.17-.79-.44-1.06L14.17 1L7.59 7.58C7.22 7.95 7 8.45 7 9v10a2 2 0 0 0 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2M1 21h4V9H1v12Z"/></svg>
	<p>
		<UIString key="feedback.success" />
	</p>
</div>


<!-- Feedback Form Functions -->
<script type="text/javascript" >
	document.addEventListener("DOMContentLoaded", function(event){
	  	var submitBtn = document.querySelector('button[type="submit"]')
	  	var form = document.querySelector("#feedback-fish-form-custom")
	  	var success = document.querySelector("div.success-pane")

	  	var showSuccess = show => {
	  	  form.hidden = show
	  	  success.hidden = !show
	  	  if (show) success.focus()
	  	}

	  	form.addEventListener('submit', function(e){
	  		//console.log("feedbackFormSubmit start")
	  		e.preventDefault()
	  		//console.log("e.preventDefault")
	  		// Disable submit button while submitting to guard against re-submits.
	  		submitBtn.disabled = true
	  		fetch("https://api.feedback.fish/feedback", {
	  		    method: "POST",
	  		    headers: { "Content-Type": "application/json" },
	  		    body: JSON.stringify({
	  		      projectId: '17bc7bf1819ed6',
	  		      text: form.text.value,
	  		      category: form.category.value,
	  		      metadata: { url: location.pathname.replace(/\/$/, "") }
	  		    })
	  		  })
	  	 	//console.log("fetch function complete")	
	  		showSuccess(true)
	  		submitBtn.disabled = false
	  		form.reset()
	  		//console.log("post-submit functions complete")	
	  	});
	});
</script>

<style>
	feedback-form {
		--feedback-form-padding: 1rem;
		--feedback-form-close-icon-size: 1.5rem;
	}

	form {
		display: block;
		width: 100%;
		max-width: 480px;
	}

	form h1 {
		padding: 0 calc(var(--feedback-form-close-icon-size) + var(--feedback-form-padding));
		font-size: var(--theme-text-lg);
		font-weight: bold;
		grid-column: 2 / 3;
	}

	fieldset {
		border: 0;
		padding: 0;
	}

	.category-options {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 0.75rem;
	}

	.category-option label {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 0.75rem;
		gap: 0.25rem;
		font-size: var(--theme-text-xs);
		font-weight: 600;
		outline: 2px solid transparent;
		border: 2px solid transparent;
		border-radius: 1rem;
		cursor: pointer;
	}

	.category-option label:hover {
		background-color: var(--custom-tan-50);
	}

	.category-option input:checked + label {
		background-color: var(--custom-maroon-25);
		border-color: var(--custom-maroon-90);
	}

	dialog *:focus,
	.category-option input:focus + label {
		outline: 2px solid var(--theme-accent-secondary);
	}

	.category-option svg {
		color: var(--theme-text);
		width: 2.25rem;
	}

	textarea {
		border: 2px solid var(--custom-maroon-90);
		border-radius: 0.5rem;
		resize: none;
		line-height: 1.5;
		padding: 0.5rem;
		font-family: inherit;
		font-size: var(--theme-text-xs);
		width: 100%;
		margin: 1rem 0;
	}

	:global(.theme-dark) textarea {
		background-color: var(--theme-bg-offset);
	}

	.submit-buttons {
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.submit-buttons p {
		font-size: var(--theme-text-xs);
		color: var(--theme-text);
		font-weight: 600;
		padding: 0 0.5rem;
	}

	@media (max-width: 50em) {
		.submit-buttons {
			flex-direction: column;
			align-items: stretch;
		}
	}

	a {
		background-color: var(--theme-text);
		color: var(--theme-bg);

		border: 1px solid var(--theme-shade-subtle);
		display: flex;
		text-decoration: none;
		justify-content: center;
		align-items: center;
		flex: 1;
		font: inherit;
		font-size: var(--theme-text-sm);
		padding: 0.5rem;
		border-radius: 0.5rem;
		cursor: pointer;
	}

	a:hover {
		text-decoration: none;
	}

	button[type='submit'] {
		border: 1px solid var(--custom-grey);
		      border-radius: 1.5rem;
		      /* background-color: transparent; */
		      background-color: var(--custom-maroon);
		      cursor: pointer;
		      font-size: 1rem;
		      text-transform: uppercase;
		      padding: 0.5em 1.75em 0.5em 1.75em;
		      line-height: calc(1 / var(--theme-text-xs));
		      color: var(--custom-white);
		      font-family: var(--font-heading);
	}

	form:invalid button[type='submit'] {
		opacity: 0.5;
	}

	.success-pane {
		padding: 2rem;
		text-align: center;
	}

	button[data-close-modal] {
		position: absolute;
		top: var(--feedback-form-padding);
		right: var(--feedback-form-padding);
		display: flex;
		border: 0;
		padding: 0.125rem;
		background-color: transparent;
		width: var(--feedback-form-close-icon-size);
		justify-self: flex-end;
		color: var(--theme-text-lighter);
		cursor: pointer;
	}

	button[data-close-modal]:hover {
		color: var(--theme-text);
	}

	button[data-open-modal] {
		border: 1px solid var(--custom-accent-1-50);
		border-radius: 0.5rem;
		background-color: transparent;
		cursor: pointer;
		font-size: 1rem;
		line-height: calc(1 / var(--theme-text-xs));
	}

	button[data-open-modal]:hover,
	button[data-open-modal]:focus {
		background-color: var(--custom-accent-2-10);
	}

	button[data-open-modal]:focus:not(:focus-visible) {
		background-color: transparent;
	}

	[hidden] {
		display: none;
	}
</style>
